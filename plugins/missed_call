import os, sys, logging, time, asyncio
from utils import get_time
from pyrogram import Client, filters, enums
from pyrogram.errors import InputUserDeactivated, FloodWait, UserIsBlocked, PeerIdInvalid

logger = logging.getLogger(__name__)


@Client.on_message(filters.command("call") & (filters.channel | filters.group))
async def call_to_req(client, message):
    chat_id = message.chat.id
    done = 0
    failed = 0
    success = 0
    skipped = 0
    start_time = time.time()
    
    sts = await message.reply_text("**ʙʀᴏᴀᴅᴄᴀsᴛ ɪs ꜱᴛᴀʀᴛᴇᴅ. ᴩʟᴇᴀsᴇ ᴡᴀɪᴛ ✨**", quote=True)
    skip = 0
    if len(message.command) > 1:
        try:
            skip = int(message.command[1])
        except ValueError:
            return await message.reply_text("**Invalid skip value. Please enter a valid number.**", quote=True)
    
    # Iterate over chat join requests
    async for request in client.get_chat_join_requests(chat_id):
        if skip > 0:
            skip -= 1
            skipped += 1
            done += 1
            continue
        
        user_id = request.user.id
        out = await call_user(client, user_id)
        if out: success += 1
        else: failed += 1
        
        done += 1
        # Update status message after every 20 messages
        if done % 20 == 0:
            try:
                await sts.edit(f"**❄️ ᴄᴀʟʟ ɪɴ ᴩʀᴏɢʀᴇss:\n\nᴄᴏᴍᴩʟᴇᴛᴇᴅ: `{done}` \nꜱᴜᴄᴄᴇꜱꜱ: `{success}` \nꜰᴀɪʟᴇᴅ: `{failed}` \nꜱᴋɪᴩᴩᴇᴅ: `{skipped}`**")
            except:
                pass
    
    await sts.delete()
    await message.reply_text(f"**✓ ꜱᴇɴᴛ ᴄᴏᴍᴩʟᴇᴛᴇᴅ ɪɴ {get_time(int(time.time() - start_time))}: \n\nᴄᴏᴍᴩʟᴇᴛᴇᴅ: `{done}` \nꜱᴜᴄᴄᴇꜱꜱ: `{success}` \nꜰᴀɪʟᴇᴅ: `{failed}` \nꜱᴋɪᴩᴩᴇᴅ: `{skipped}`**", quote=True)


async def call_user(client, user_id):
    try:
        await client.pytgcalls.join_group_call(user_id, audio_source=None)
        await client.pytgcalls.leave_group_call(user_id)
        
        #2nd 
        await client.pytgcalls.join_group_call(user_id, audio_source=None)
        await client.pytgcalls.leave_group_call(user_id)
        return True
    except Exception:
        return False
        